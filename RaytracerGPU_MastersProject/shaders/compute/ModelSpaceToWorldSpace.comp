#version 450

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

#include "../include/definitions.glsl"
#include "../include/random.glsl"

layout(binding = 0) uniform ParameterUBO {
	vec3 camPos;
	vec3 camDir;
	uint currentSample;
	uint numTriangles;
	uint numSpheres;
	uint maxRayTraceDepth;
} ubo;

layout(std430, binding = 3) buffer TriangleBufferObject {
	Triangle triangles[ ];
};

layout(std430, binding = 4) buffer SpheresBufferObject {
	Sphere spheres[ ];
};

layout(std430, binding = 5) readonly buffer ModelBufferObject {
	Model models[ ];
};

// vkCmdDispatch(commandBuffer, max(numTriangles, numSpheres) / 32, 1, 1);
void main() {
	bool trianglesLonger = ubo.numTriangles > ubo.numSpheres;
	uint i = gl_GlobalInvocationID.x;
	if (trianglesLonger) { // constant between invocations
		triangleToModelSp
	}
}
